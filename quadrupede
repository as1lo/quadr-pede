
#include <Servo.h>
#define tempo 500 //tempo de pausa entre movimentos
#define angulo_inicial 90

Servo per[4], pa[4];

int perna[4] = {4, 8, 6, 2}, pata[4] = {5, 9, 7, 3};


void setup(){
  int i = 0;
  
  while(i < 4){
    per[i].attach(perna[i]);
    pa[i].attach(pata[i]);

    pa[i].write(angulo_inicial);
    
    i++;
  }
  
  per[0].write(90);
  per[1].write(45);
  per[2].write(135);
  per[3].write(90);
  
  Serial.begin(9600);
  delay(2000);
}

void esquerda(){
  //perna3 para esquerda (dianteira - direita)
  pa[3].write(180);                 //pata3 sobe
  delay(tempo);
  
  //90 -> 45
  per[3].write(45);               //perna3 tras
  delay(tempo);
  
  pa[3].write(90);                 //pata3 desce
  delay(tempo);

//perna1 para esquerda (traseira - esquerda)
  pa[1].write(180);                //pata3 sobe
  delay(tempo);
  
  //45 -> 0
  per[1].write(0);               // perna3 frente
  delay(tempo);
  
  pa[1].write(90);                // pata3 desce
  delay(tempo);

//perna0 para esquerda (dianteira - esquerda)
  pa[0].write(180);                // pata1 sobe(desce)
  delay(tempo);
  
  //90 -> 45
  per[0].write(45);              // perna1 frente
  delay(tempo);
  
  pa[0].write(90);                //pata1 desce(sobe)
  delay(tempo);


//perna2 para esquerda (traseira - direita)
  pa[2].write(180);                 //pata2 sobe(desce)
  delay(tempo);
  
  //135 -> 90
  per[2].write(90);                //perna2 frente
  delay(tempo);
  
  pa[2].write(90);                 //pata2 desce(sobe)
  delay(tempo);


int move[4] = {45, 0, 90, 45};

while(move[0] <= 90){
    per[1].write(move[1]); //0 -> 45
    per[3].write(move[3]); //45 -> 90
    per[2].write(move[2]); //90 -> 135
    per[0].write(move[0]); //45 -> 90
    
    move[1]++;
    move[3]++;
    move[2]++;
    move[0]++;
    delay(10);
  }
  
  delay(tempo);
}

void direita(){
  //perna3 para direita (dianteira - direita)
  pa[3].write(180);                 //pata3 sobe
  delay(tempo);
  
  //90 -> 135
  per[3].write(135);               //perna3 tras
  delay(tempo);
  
  pa[3].write(90);                 //pata3 desce
  delay(tempo);


//perna1 para direita (traseira - esquerda)
  pa[1].write(180);                //pata3 sobe
  delay(tempo);
  
  //45 -> 90
  per[1].write(90);               // perna3 frente
  delay(tempo);
  
  pa[1].write(90);                // pata3 desce
  delay(tempo);


//perna0 para direita (dianteira - esquerda)
  pa[0].write(180);               // pata1 sobe(desce)
  delay(tempo);
  
  //90 -> 135
  per[0].write(135);              // perna1 frente
  delay(tempo);
  
  pa[0].write(90);                //pata1 desce(sobe)
  delay(tempo);


//perna2 para direita (traseira - direita)
  pa[2].write(180);               //pata2 sobe(desce)
  delay(tempo);
  
  //135 -> 180
  per[2].write(180);               //perna2 frente
  delay(tempo);
  
  pa[2].write(90);                //pata2 desce(sobe)
  delay(tempo);


int move[4] = {135, 90, 180, 135};

while(move[0] >= 90){
    per[1].write(move[1]); //90 -> 45
    per[3].write(move[3]); //135 -> 90
    per[2].write(move[2]); //180 -> 135
    per[0].write(move[0]); //135 -> 90
    
    move[1]--;
    move[3]--;
    move[2]--;
    move[0]--;
    delay(10);
  }
  
  delay(tempo);
}

void tras(){
//perna3 para tras (dianteira - direita)
  pa[3].write(180);                //pata3 sobe
  delay(tempo);
  
  //90 -> 135
  per[3].write(135);               //perna3 tras
  delay(tempo);
  
  pa[3].write(90);                //pata3 desce
  delay(tempo);



//perna1 para frente (traseira - esquerda)
  pa[1].write(180);                //pata1 sobe
  delay(tempo);
  
  //45 -> 0
  per[1].write(0);               // perna1 tras
  delay(tempo);
  
  pa[1].write(90);                // pata1 desce
  delay(tempo);



//perna0 para frente (dianteira - esquerda)
  pa[0].write(180);               // pata0 sobe(desce)
  delay(tempo);
  
  //90 -> 45
  per[0].write(45);              // perna0 frente
  delay(tempo);
  
  pa[0].write(90);                //pata0 desce(sobe)
  delay(tempo);



//perna2 para frente (traseira - direita)
  pa[2].write(180);               //pata2 sobe(desce)
  delay(tempo);
  
  //135 -> 180
  per[2].write(180);               //perna2 frente
  delay(tempo);
  
  pa[2].write(90);                //pata2 desce(sobe)
  delay(tempo);


  int move[4] = {45, 0, 180, 135};

  while(move[3] >= 90){
    per[1].write(move[1]); //0 -> 45
    per[3].write(move[3]); //135 -> 90
    per[2].write(move[2]); //180 -> 135
    per[0].write(move[0]); //45 -> 90

    move[1]++;
    move[3]--;
    move[2]--;
    move[0]++;
    delay(10);
  }

  delay(tempo);
}


void frente(){
  //perna3 para frente (dianteira - direita)
  pa[3].write(180);                //pata3 sobe
  delay(tempo);
  
  //90 -> 45
  per[3].write(45);               //perna3 frente
  delay(tempo);
  
  pa[3].write(90);                //pata3 desce
  delay(tempo);

  
  
  
  //perna1 para frente (traseira - esquerda)
  pa[1].write(180);                //pata1 sobe
  delay(tempo);
  
  //45 -> 90
  per[1].write(90);               // perna1 frente
  delay(tempo);
  
  pa[1].write(90);                // pata1 desce
  delay(tempo);

  
  
  
  
  //perna0 para frente (dianteira - esquerda)
  pa[0].write(180);               // pata1 sobe
  delay(tempo);
  
  //90 -> 135
  per[0].write(135);              // perna1 frente
  delay(tempo);
  
  pa[0].write(90);                //pata1 desce
  delay(tempo);

  
  
  
  
  //perna2 para frente (traseira - direita)
  pa[2].write(180);               //pata2 sobe
  delay(tempo);
  
  //135 -> 90
  per[2].write(90);               //perna2 frente
  delay(tempo);
  
  pa[2].write(90);                //pata2 desce
  delay(tempo);
  
  
  
  // mandar todas as 4 pernas, arrastando-as no chão,
  // para trás para voltar a sua posição de inicio
  // e ao mesmo tempo fazendo com que todo o quadrúpede mude sua
  // posição referente ao terreno
  
  int move[4] = {135, 90, 90, 45};
  
  while(move[0] >= 90){
    per[1].write(move[1]); //90 -> 45
    per[3].write(move[3]); //45 -> 90
    per[2].write(move[2]); //90 -> 135
    per[0].write(move[0]); //135 -> 90
    
    move[1]--;
    move[3]++;
    move[2]++;
    move[0]--;
    delay(10);
  }

  delay(tempo);
  
 
}

String le_Serial(){
  String conteudo = "";
  char caractere;
  
  while(Serial.available() > 0) {

    caractere = Serial.read();

    conteudo.concat(caractere);
    
    delay(10);
  }
  
  Serial.print("Recebido:");
  Serial.println(conteudo);
  return conteudo;
}

void loop(){
   String recebido="";
  
  if (Serial.available() > 0){
    recebido = le_Serial();
  }
  
  if (recebido =="avanca"){frente();} 
  if (recebido =="retorna"){tras();} 
  if (recebido =="esquerda"){esquerda();} 
  if (recebido =="direita"){direita();} 
  
}


